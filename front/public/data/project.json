[
  {
    "id": 1,
    "date": "2022.07 ~ 2022.8",
    "name": "Airbnb",
    "detail": "기존 웹 서비스 \"에어비앤비\" 클론코딩",
    "img": "images/airbnb.png",
    "icon" : "images/icon/airbnb_icon.png",
    "video":"videos/airbnb.mp4",
    "skills": {
      "skill": "REACT, JAVASCRIPT, HTML/CSS",
      "organization": "라이징캠프",
      "detail": "프론트엔드에 관심을 가지기 시작하며, 웹을 공부하기 위해 라이징캠프(웹 교육)를 들으며 \"에어비앤비\" 클론 코딩을 진행했습니다.",
      "github": "https://github.com/yeeun426/airbnb_web",
      "video": "https://drive.google.com/drive/folders/113-xXCJ0R3WV6a9f4WHf79QP1Io8UKCT",
      "role1" : "1. 메인페이지\n - 반복되는 컴포넌트들은 데이터만 변경하여 사용될 수 있는 컴포넌트로 분리\n - 카카오맵 api를 사용하여 지도를 구현\n -위도, 경도를 데이터로 저장시켜 마커를 이용해 장소의 가격 표시\n - 하트 버튼 활성화위해 styled 컴포넌트의 props 기능을 사용 \n \n2. 세부화면 \n - 가격정보는 스크롤 위치에 따라 움직이고 특정 위치에서는 고정 시킴",
      "role2" : "3. 검색페이지\n 리코일을 사용하여 atom에 고유한 키값에 ‘country’를 저장하고 검색 페이지로 변경 시 이 값을 저장시킴.\n\n 4. 호스트되기 \n - swiper.js 라이브러리를 사용하여 호스트의 정보를 보여줌"
    },
    "QnA": [
      {
        "id": "learn",
        "question": "이 프로젝트를 통해 배운점은 뭔가요?",
        "answer": "[컴포넌트 분리 / 재사용]\n- header나 footer와 같은 모든 화면에서 반복적으로 사용될 수 있는 컴포넌트 단위로 화면을 분리시키고 재사용 가능하게 하는 방식이다.\n- 틀은 반복되지만 안에 데이터만 바뀌는 메인 화면의 숙소 리스트들에 경우, 하나의 컴포넌트를 만들고 반복적으로 데이터만 변경하여 뿌려주도록 구현하였다.\n\n[카카오맵 API]\n- 카카오맵 api를 사용하여 지도를 구현했고 위도, 경도를 데이터로 저장시켜 그 위치에 마커를 찍어 가격을 표시하였다.\n\n[리코일]\n- 리코일을 사용하여 atom에 고유한 키값에 기본값 ‘country’와 기본값인 ‘여행지 검색’을 저장하고 필요한 컴포넌트에서 이 값을 사용할 수 있게 하였다.\n- 리코일은 검색 기능에서 나라를 선택할 때 다음 페이지로 넘어가도 선택한 나라가 띄어져 있도록 하는 데 사용되었다.\n- 만약 나라를 선택하지 않고 검색을 누른다면 ‘여행지 검색’ 문구가 뜨게 된다.\n\n[styled components]\n- 스타일드 컴포넌트를 사용하여 상속과 props를 유동적으로 사용하여 스타일링할 수 있었다.\n- 예를 들어 메인 화면에서 하트 버튼이 true일 때 빨간색으로, false일 때 흰색으로 칠하고 싶었고 이 기능에 스타일드 컴포넌트의 props 기능을 사용할 수 있었다.\n- 하트 버튼을 눌렀을 때 like.like를 false로 바꾸는 함수를 작성하였고 like.like의 boolean 값을 받아 스타일드 컴포넌트에 전달하여 boolean 값에 따라 fill의 색을 다르게 부여하는 방식으로 사용하였다.\n\n[반응형 웹]\n- 핵심 화면의 크기별 레이아웃이 변경되는 메인 화면을 모바일 버전까지 고려하여 반응형 웹으로 코딩하였다.\n- px 단위를 최대한 지양하고 폰트는 rem으로, width나 height는 % 단위, vw 등의 상대적인 단위를 사용하여 반응형 웹으로 변경하였다.\n- 레이아웃이 달라지는 경우, 여행지가 한 줄에 4개씩 줄이면 줄일수록 3개, 2개, 1개로 보이도록 grid 속성을 사용하여 수정하였다.\n- 반응형 CSS의 핵심인 미디어쿼리를 사용하여 화면의 해상도별로 CSS 속성을 변경할 수 있게끔 하였다.- 예를 들어 메인 화면에서 하트 버튼이 true일 때 빨간색으로 false일 때 흰색으로 칠하고 싶었고 이 기능에 스타일드 컴포넌트의 props 기능을 사용할 수 있었다.- 하트 버튼을 눌렀을 때 like.like를 false로 바꾸는 함수를 작성하였고 like.like의 boolean값을 받아 스타일드 컴포넌트에 전달하여 boolean값에 따라 fill의 색을 다르게 부여하는 방식으로 사용하였다.\n\n[반응형 웹]\n- 핵심 화면의 크기별 레이아웃이 변경되는 메인 화면을 모바일 버전까지 고려하여 반응형 웹으로 코딩하였다.\n- px단위를 최대한 지양하고 폰트는 rem으로, width나 height는 %단위, vw등의 상대적인 단위를 사용하여 반응형 웹으로 변경하였다.\n- 레이아웃이 달라지는 경우, 여행지가 한줄에 4개씩 줄이면 줄일 수록 3개, 2개, 1개로 보이도록 grid 속성을 사용하여 수정하였다.\n- 반응형 css 의 핵심인 미디어쿼리를 사용하여 화면의 해상도 별로 css 속성을 변경할 수 있게끔 하였다."
      },
      {
        "id": "disappointing",
        "question": "이 프로젝트에서 어려웠던 점은 무엇인가요?",
        "answer": "프론트엔드에 대해 모든걸 처음으로 배우고, 프론트엔드 개발자가 어떤 일을 하는건지 배우는 경험이었습니다.\nweek1 과제는 원하는 서비스를 골라 한페이지를 그대로 퍼블리싱해오는 태스크였습니다. \n당시 html, css에 대해 제대로 알지 못했고 수업에서 이러한 부분을 다루기보다 어떤 태그가 있는지, 웹이 무엇인지에 대해서 배웠기 때문에 처음부터 끝까지 스스로 css, html 공부하며 진행했던 점이 힘들었습니다. \n하지만 몰입과 집중으로 해낼 수 있었고, 오로지 나만의 코드로,  css를 다루는데 훨씬 능숙해질 수 있었습니다. 과제에 대한 발표를 진행하며 당시 멘토님께 피드백 받은 부분에 대해 수정하고, 다른 분들의 과제를 보며 부족한 부분을 매주 고쳐나갔습니다. 당시에는 모든게 배워야할 것이라 시간이 부족하고 어지럽기도 했지만, 그 후 이를 활용해 퍼블리싱 외주에 참여한 경험이 있습니다."
      }
    ]
  },
  {
    "id": 2,
    "date": "2022.08",
    "name": "myRecipes",
    "detail": "식품의약품안전처 api 연동 레시피 검색 웹 프로젝트",
    "img": "images/myrecipes.png",
    "icon" : "images/myRecipes_icon.png",
    "video":"videos/myrecipes.mp4",
    "skills": {
      "skill": "REACT, JAVASCRIPT, HTML/CSS",
      "organization": "라이징캠프",
      "detail": "본 프로젝트는 open API를 활용하여 해당 데이터를 가지고 웹 서비스를 제작하였다.원하는 음식을 검색할 수 있고 그 음식의 레시피를 확인할 수 있는 프로젝트이다.",
      "github": "https://github.com/yeeun426/myRecipes-web-project",
      "video": "https://drive.google.com/drive/folders/1kATYaHrN2w6lUqXJmRHM9gPEAcTMpnVN",
      "role1" : "1. 로그인페이지\n - kakao 로그인을 요청하면 인가 요청이 생성되고, 엑세스 토큰을 획득하게 되면 사용자 정보를 요청 -> 사용 할 수 있게 된다. 이를 이용해 유저의 카카오톡 이름, 이메일, 프로필 사진을 가져옴.\n \n2. 메인페이지 \n - 식품의약품안전처 '조리식품의 레시피DB' API를 이용해  바로 호출하기보다는 postman이라는 서버통신 툴을 사용하여 정상작동하는지 먼저 확인 후 api 연결",
      "role2" : "- 음식 이름('RCP_NM')속성에 검색한 단어('search')문자열이 포함되어있는지 includes 메서드를 사용하여 특정 문자열이 포함되어있는지 확인하는 방식으로 검색 기능을 구현\n \n 3. 상세페이지\n - api가 로딩이 되는 중 빈 배열을 갖고 있기 때문에 이를 이용하여 loading이 true로 바뀌게하여 로딩 스피너를 실행하게 하였다."
    },
    "learn": "기존 에어비앤비 클론코딩은 api를 연결하지 않고 제작했다면 본 프로젝트에서는 open API를 이용해 API 연동하는 연습을 할 수 있었다. 평소 다이어트를 자주 하는 편인데 그럴 때 항상 칼로리를 확인하곤 했다. 이러한 경험을 바탕으로 상세페이지에 들어가지 않아도 칼로리를 먼저 확인하고 칼로리가 적합하다고 느끼면 상세페이지에서 레시피를 확인할 수 있게 만들고자 하였다. api 연동 후 검색 기능을 구현하고 소셜 로그인(카카오)을 구현했다.",
    "QnA": [
      {
        "id": "learn",
        "question": "이 프로젝트를 통해 배운점은 뭐가 있나요?",
        "answer": "처음으로 postman을 이용해 api를 테스트해보고 직접 데이터를 프론트단에서 뿌려주는 것을 직접 경험할 수 있었습니다. 처음으로 외부 api의 데이터가 생각하는대로 보여지는게 정말 신기했습니다. 이 당시 또 한번 프론트단의 재미를 느꼈습니다. 뿐만 아니라 데이터가 들어오는 텀을 채우기 위해 로딩 스피너를 활용하여 조금 더 재미난 웹을 개발할 수 있었습니다."
      },
      {
        "id": "disappointing",
        "question": "이 프로젝트에서 아쉬운/보완하고 싶은 점은 무엇인가요?",
        "answer": "교육을 들으며 짧게 진행했던(기간 : 일주일) 프로젝트였기 때문에 다양한 기능을 구현해내지는 못했습니다. open api를 이용한 자유 주제였는데 시간에 쫓겨 기발한 주제를 다루지 못한것도 아쉬움이 남습니다."
      }
    ]
  },
  {
    "id": 3,
    "date": "22.6 ~ 22.9",
    "name": "MAPLIX",
    "detail": "2022 관광데이터활용 공모전 우수상",
    "img": "images/maplix.jpeg",
    "icon" : "images/maplix_icon.png",
    "video":"videos/maplix.mp4",
    "skills": {
      "skill": "REACT, JAVASCRIPT, HTML/CSS",
      "organization": "한국관광공사, 카카오",
      "detail": "프론트와 서버간의 통신을 공부하기 위해 라이징캠프(웹 교육)를 들으며 원티드 클론 코딩을 진행했습니다.",
      "data": "카카오맵API, 한국관광공사 두루누비 정보 서비스 API",
      "github": "https://github.com/yeeun426/MAPLIX",
      "video": "http://ec2-3-37-76-88.ap-northeast-2.compute.amazonaws.com/",
      "role1" : "1. 메인페이지\n - 메인페이지 퍼블리싱과 주된 기능을 담당\n- 대부분 api 연결을 통해 버튼 hover시, 데이터가 보여지도록 구현\n \n2. 검색 페이지 \n - 검색 필터 선택 시, api로 불러온 데이터의 카테고리와 비교 후 데이터를 뿌려줌 \n - 카카오맵 api를 불러와 적절한 한국의 지도를 보여주도록 설정\n - 장소 결과에 페이지네이션을 적용하기 위해 컴포넌트로 구현하여 재사용할 수 있도록 구현",
      "role2" : "3. 추천코스페이지\n - '한국관광공사 두루누비 정보 서비스 API'를 사용하여 관광공사측에서 알려주는 코스를 지역별로 추천코스로 구현\n - api가 불러와지는 시간동안 스피너가 돌아가며 데이터가 불러와지고 있음을 시각적으로 보여줌 \n\n 4. 커뮤니티 페이지 \n - 해당 게시물을 클릭했을 때 아이디 값이 같은 경우 해당 게시물에 대한 상세 모달창이 뜨면서 외부 클릭을 막도록 구현 \n\n 퍼블리싱은 모두 혼자 진행했습니다.\n\n** 제가 구현한 기능들만 작성해두었습니다. **"
    },
    "QnA": [
      {
        "id": "learn",
        "question": "이 프로젝트를 통해 배운점은 뭐가 있나요?",
        "answer": "이 프로젝트를 통해 실제 프로젝트는 어떤식으로 흘러가는지를 알 수 있었습니다. 프론트단에서 흔히들 겪는 CORS에러를 만나며 이를 어떻게 해결해야하는지 몸소 경험해볼 수 있었습니다. 뿐만 아니라 다른 웹 페이지들을 참고하며 어떤 기능을 사람들이 필요로할지 바라보는 관점을 넓게 배울 수 있었습니다. \n 모달창, 페이지네이션과 같은 새로운 기능들도 직접 경험해보며 어떤 식의 흐름으로 짜야지 이러한 동작들이 작동하는지 하나씩 이해할 수 있는 경험이었습니다."
      },
      {
        "id": "disappointing",
        "question": "이 프로젝트에서 아쉬운/보완하고 싶은 점은 무엇인가요?",
        "answer": "아쉬웠던 점은 퍼블리싱을 전담하여 맡게되다보니 기능을 계획보다 많이 구현하지 못한 점입니다. 당시 퍼블리싱에 경험이 있는 팀원은 저 뿐이었기 때문에 역할 분담에 있어서 해보고 싶던 기능들을 시간상 다른 팀원이 맡게 된 것이 아쉽습니다."
      }
    ]
  },
  {
    "id": 4,
    "date": "22.8 ~ 22.9",
    "name": "wanted",
    "detail": "기존 웹 서비스 \"원티드\" 클론코딩",
    "img": "images/wanted.png",
    "icon" : "images/wanted_icon.png",
    "video":"videos/wanted.mp4",
    "skills": {
      "skill": "REACT, JAVASCRIPT, HTML/CSS",
      "organization": "한국관광공사, 카카오",
      "detail": "본 프로젝트는 라이징캠프 서버 개발자분들과 협업하여 \"원티드\"를 클론코딩하였다.",
      "data": "카카오맵API, 한국관광공사 두루누비 정보 서비스 API",
      "github": "https://github.com/yeeun426/wanted_web_ony",
      "video": "https://drive.google.com/drive/folders/1kqTYssxoAYglwE3fiOZ2iuflulpIJ2lV",
      "role1" : "1. 메인페이지\n - SwiperCore를 사용하여 자동재생, 네비게이션과 같은 핵심기능을 구현\n - 로그인했을 때, 로그인하지 않았을 때 보이는 데이터를 sessionStorage을 이용해 다르게 함. \n\n2. 북마크페이지 \n - 북마크한 기업들만 filter함수를 사용해 북마크 페이지에서 보이도록 함.",
      "role2" : "3. 로그인/회원가입 페이지\n -props를 매개변수로 받아 모달창이 켜졌을 때와 꺼졌을 때를 구분 \n -useEffect를 이용해 페이지 스크롤 위치를 고정하고 스크롤이 생기지 않도록 함. \n-useState 훅을 사용하여 email, signup, passwordPage를 관리하며 emailValid로 이메일 유효성을 나타냄\n- axios를 사용하여 간단하게 HTTP 요청을 처리하여 로그인/로그아웃 기능 구현"
    },
    "QnA": [
      {
        "id": "learn",
        "question": "이 프로젝트를 통해 배운점은 뭐가 있나요?",
        "answer": "본 프로젝트에서는 직접 실제 API와 api확인을 위해 서버 개발자들과 소통할 수 있는 경험이었습니다. 처음으로 백엔드 개발자가 만든 api 명세서를 보면서 api 명세서를 보는 방법과 문서화의 편리함을 느낄 수 있었습니다."
      },
      {
        "id": "disappointing",
        "question": "이 프로젝트에서 아쉬운/보완하고 싶은 점은 무엇인가요?",
        "answer": "라이징캠프에서 가장 잘한 개발자에게는 우수 수료자를 한명 부여해주는데 이를 받지 못한 것이 아쉽습니다."
      }
    ]
  },
  {
    "id": 5,
    "date": "22.10 ~ 23.2",
    "name": "GNUVILAGE",
    "detail": "코딩 중앙 동아리 \"그누빌\" 웹 프로젝트",
    "img": "images/gnuvilage.png",
    "icon" : "images/gnuvilage_icon.png",
    "video":"videos/gnuvilage.mp4",
    "skills": {
      "skill": "REACT, JAVASCRIPT, HTML/CSS",
      "organization": "한국관광공사, 카카오",
      "detail": "본 제시안은 동아리 홍보 및 동아리 부원 내 소통, 기록용 웹 개발을 목적으로 하고있다. 주 소비자층인 대학생에 맞춰 정서에 맞게 심플하지만 한눈에 들어오는 분위기를 이끌어냈다.",
      "github": "https://github.com/yeeun426/gnuvillage-froㄴntend",
      "video": "https://gnuvil.swygbro.com/",
      "role1" : "1. 메인페이지\n - 동아리의 설명/역사를 보여주도록 함. \n\n2. 스터디성과 \n - 북마크한 기업들만 filter함수를 사용해 북마크 페이지에서 보이도록 함.",
      "role2" : "3. 공지사항"
    },
    "QnA": [
      {
        "id": "learn",
        "question": "이 프로젝트를 통해 배운점은 뭐가 있나요?",
        "answer": "프론트 개발자가 두명이었기 때문에 git이 엉키지 않도록 하는것이 가장 중요했습니다. 이 프로젝트는 기능들이 단순했지만 git 관리에 대해 확실히 배울 수 있었습니다."
      }
    ]
  },
  {
    "id": 6,
    "date": "23.6",
    "name": "GIVER",
    "detail": "학교 생활에 어려움을 겪는 장애인과 비장애인 매칭 서비스",
    "img": "images/giver.png",
    "icon" : "images/giver_icon.png",
    "video":"videos/giver.mp4",
    "skills": {
      "skill": "REACT, JAVASCRIPT, HTML/CSS",
      "organization": "GDSC",
      "detail": "본 제시안은 장애인의 학교생활을 돕기 위한 앱 개발을 목적으로 하고 있다. 주 소비자층인 기존의 앱과 드리게 장애인에 맞춰 정서에 맞게 그들이 쉽게 도움을 요청할 수 있도록 웹으로 제작할 예정이다. 또한 Donation을 통해 합리적인 소비를 도울 예정이다.",
      "github": "https://github.com/yeeun426/Giver_front-end",
      "video": "videos/giver.mp4",
      "role1" : "1. 메인페이지\n - 반복되는 컴포넌트들은 데이터만 변경하여 사용될 수 있는 컴포넌트로 분리\n - 카카오맵 api를 사용하여 지도를 구현\n -위도, 경도를 데이터로 저장시켜 마커를 이용해 장소의 가격 표시\n - 하트 버튼 활성화위해 styled 컴포넌트의 props 기능을 사용 \n \n2. 세부화면 \n - 가격정보는 스크롤 위치에 따라 움직이고 특정 위치에서는 고정 시킴",
      "role2" : "3. 검색페이지\n 리코일을 사용하여 atom에 고유한 키값에 ‘country’를 저장하고 검색 페이지로 변경 시 이 값을 저장시킴.\n\n 4. 호스트되기 \n - swiper.js 라이브러리를 사용하여 호스트의 정보를 보여줌"
    },
    "QnA": [
      {
        "id": "learn",
        "question": "이 프로젝트를 통해 배운점은 뭐가 있나요?",
        "answer": "본 프로젝트에서는 직접 실제 API와 api확인을 위해 서버 개발자들과 소통할 수 있는 경험이었습니다. 처음으로 백엔드 개발자가 만든 api 명세서를 보면서 api 명세서를 보는 방법과 문서화의 편리함을 느낄 수 있었습니다."
      },
      {
        "id": "disappointing",
        "question": "이 프로젝트에서 어려웠던/아쉬운 점은 무엇인가요?",
        "answer": "해커톤이라는 시간 제약으로 결과를 제출할 때 채팅창 퍼블리싱이 완료되지 않은 점이 아쉽습니다."
      }
    ]
  },
  {
    "id": 7,
    "date": "23.4 ~ 23.7",
    "name": "NDGD",
    "detail": "고용노동 공공데이터 활용 공모전",
    "img": "images/ndgd.png",
    "icon" : "images/ndgd_icon.png",
    "video":"videos/ndgd.mp4",
    "skills": {
      "skill": "REACT, JAVASCRIPT, HTML/CSS",
      "organization": "고용노동부",
      "detail": "본 프로젝트는 개인 맞춤형 산재 보상 정보(보험금 액수, 승인 확률) 를 제공할 뿐민 아니라 노동자에게 필요한 정보를 직접 제공, 또는 해당 정보가 있는 곳으로 연결해주는 노동자를 위한 산재 보상 정보의 메카",
      "data": "고용노동 공공데이터",
      "github": "https://github.com/yeeun426/NDGD_front",
      "video":"videos/ndgd.mp4",
      "purpose" : "1. 노무사나 변호사가 필요한 경우 노동자가 본인의 상황에 따른 가능한 보상 정도에 대해 어느 정도 파악하고 있어야 좋은 노무사또는 변호사를 선택할 수 있다. 하지만 이는 노동자가 개인적으로 수행하기엔 어려운 단계이다. 이를 위해 개인 맞춤형 산재 보상 정보를 제공하는 서비스가 필요하다고 생각했다.\n2. 산재 승인 및 보험금 수령의 절차가 복잡하며, 관련 정보가 분산되어 있기 때문에 산재가 발생했을 때 노동자 스스로 수많은 검색의 단계를 거쳐야 한다. 이 때문에 기존의 웹사이트들 보다 좀 더 직관적이고 실질적인 도움이 되는 정보를 제공하는 웹 플랫폼이 필요하다는 생각이 들었다.",
      "procedure" : "대학교 친구들에게 공모전에 나갈 생각없냐는 제안을 받고 ‘고용노동 공공데이터 활용 공모전’에 참여하게 되었습니다. 일주일에 2~3번정도 회의를 하며 현재 어디까지 개발되고 있는지 상황을 공유했습니다. 그 후 이슈가 있는 부분은 함께 이야기하며 대안을 찾아나갔습니다.",
      "role1" : "1. 메인페이지\n - swiper 라이브러리를 사용해 웹 사이트의 기능들을 배너로 만듦\n - 산재 보험 서비스이기 때문에 나이대를 높게 잡고, 다양한 나이대의 사용자가 이용하기 편하게 메인페이지를 어렵지 않게 퍼블리싱하였음\n\n2. 로그인 페이지\n-props를 매개변수로 받아 모달창이 켜졌을 때와 꺼졌을 때를 구분\n-useState를 사용해 emailValid로 이메일 유효성을 나타냄\n-비동기로 로그인/로그아웃 기능 구현",
      "role2" : "3. 산재 보상 절차\n - 산재 보상 절차에 대해 알려주며 본 페이지에서 바로 산재지정 의료기관을 확인할 수 있게함.\n- 산업재해조사표를 pdf로 다운받는 형식으로 버튼을 만들어 웹의 편리성을 높임\n\n 4. 확률 계산기 \n - 사내 상황을 formData에 담아 post요청을 하면 수령가능 확률/보험료의 상태를 업데이트하여 보여줌"
    },
    "QnA": [
      {
        "id": "learn",
        "question": "이 프로젝트를 통해 배운점은 뭐가 있나요?",
        "answer": "[사용자 중심 UI/UX]\n- 산재 보상 정보를 찾는 주요 사용자층이 나이대가 높은 경우가 많을 것이라고 판단하여, 가독성을 높이기 위해 기존 웹사이트들에 비해 글씨 크기를 크게 설정했습니다. 또한 버튼 크기와 간격을 적절히 조정해 시인성을 높이고, 마우스 또는 터치로 쉽게 조작할 수 있도록 UX를 개선했습니다.\n- 모든 기능에 한눈에 접근할 수 있도록 메인 페이지를 설계해 사용자들이 원하는 페이지로 쉽게 이동할 수 있게 했습니다. 이를 위해 주요 메뉴와 버튼을 한눈에 보이도록 배치하고, 헷갈리지 않도록 명확한 볼드 텍스트와 색상 대비를 활용했습니다.\n- 산재 보상 절차 방법 페이지에서는 사용자들이 필요한 자료를 빠르게 찾고 사용할 수 있도록, 최소 클릭만으로 필요한 정보를 다운로드하거나 외부 사이트로 바로 연결될 수 있는 단계를 설계했습니다.\n\n[Scroll Restoration]\n- Scroll Restoration은 웹 페이지에서 사용자가 뒤로가기, 앞으로가기를 실행했을 때 이전 페이지의 스크롤 위치를 유지하거나 초기화하는 기능입니다. 이를 구현하기 위해 React Router의 useLocation 훅을 사용하여 사용자가 페이지를 탐색할 때 항상 최상단으로 스크롤되도록 했습니다.\n- 구현 방법: 이 코드를 통해 사용자가 새 페이지로 이동할 때 이전 페이지의 스크롤 위치를 초기화하고, 새 페이지가 항상 처음부터 로드되도록 설정했습니다.\n\nimport { useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\n\nconst ScrollToTop = () => {\n  const { pathname } = useLocation();\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, [pathname]);\n\n  return null;\n};\n\nexport default ScrollToTop;\n\n\n[Kakaomap api]\n- 마커를 클릭했을 때 해당 장소의 세부 정보를 보여주는 InfoWindow를 구현했습니다. 이를 통해 사용자는 지도의 마커를 직관적으로 이해할 수 있습니다. InfoWindow에 장소 이름과 설명, 링크를 추가해 사용자 경험을 향상시켰습니다.\n- 마커를 클릭하거나 특정 장소를 검색했을 때, 해당 위치를 중심으로 지도의 화면이 이동하도록 설정했습니다.\n\n[useParams]\n- 커뮤니티 게시글에서 특정 글을 클릭하면 id 값을 기반으로 동적 라우팅을 사용해 상세 페이지로 이동하도록 구현했습니다. React Router의 useParams 훅을 사용해 URL의 파라미터를 읽어 해당 데이터를 화면에 렌더링했습니다.\n\nimport { useParams } from 'react-router-dom';\n\nconst PostDetail = () => {\n  const { id } = useParams();\n  const post = postData.find((item) => item.id === Number(id));\n\n  return (\n    <div>\n      <h1>{post.title}</h1>\n      <p>{post.content}</p>\n    </div>\n  );\n};\n\nexport default PostDetail;\n\n- /post/:id 형태의 URL을 통해 사용자와 검색 엔진이 게시글의 내용을 쉽게 이해하고 접근할 수 있도록 했습니다."
      },
      {
        "id": "disappointing",
        "question": "이 프로젝트에서 어려웠던/아쉬운 점은 무엇인가요?",
        "answer": "팀원 한분이 남는 일이 있냐고 하셔서 산재지정병원 리스트를 연결하는 부분을 부탁드렸습니다. 제가 페이지 퍼블리싱은 이미 마쳤던 상황이라 공공 api 연결만 남은 상황이었습니다. 당시 그 팀원분은 프론트엔드를 해본적이 없으셨고, 제출이 얼마 남지 않은 상황에서 그 부분이 잘 안된다고 이야기를 하셔서 제가 빠르게 처리했던 경험이 있습니다. 이 전에 프로젝트에서 공공 api에 통신해본 적이 있었기 때문에 어렵지 않게 처리할 수 있었습니다. 다만, 시간이 촉박하여 다른 페이지를 마무리 짓지 못할거 같아 마음이 조급했던것 같습니다."
      }
    ]
  }
]